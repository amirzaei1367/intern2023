
views.py

Class 1: TextExtractionService
This class inherits from Django's `APIView` and is responsible for providing an API endpoint to extract text from uploaded files. It contains methods to handle POST requests for extracting text from PDF and DOCX files. When a file is uploaded, the `convert_file_to_text` method checks its type and extracts the text accordingly using the `docx2txt` and `fitz` libraries for DOCX and PDF files, respectively. The extracted text is then returned as a response.

Class 2: FieldsExtractionService
Also derived from Django's `APIView`, this class processes POST requests to extract specific fields from the provided resume text. It first uses the TextExtractionService view to obtain the extracted text. Then, it generates responses for a series of prompts using pre-trained models loaded from the "meta-llama/Llama-2-7b-chat-hf" path with the Transformers library. The prompts cover questions related to fields such as first name, last name, security clearance, certifications, skills, education, and work history. The extracted information is stored in a CSV file called 'resume_file.csv' and is also returned as a response.

Class 3: PDFGenerationService
This class derives from Django's `View` and handles GET requests to generate a PDF document containing personal information based on provided parameters. The parameters are passed as a JSON object through the request. The generated PDF is constructed using the FPDF library with specified font, size, and formatting for each field. The resulting PDF is returned as a JSON response, including the path to the generated PDF file. The class also includes a method to clean the text by filtering out special characters and reducing multiple spaces to single spaces.

apps.py 

Class 1: DatabaseAppConfig
Inherits from Django's `AppConfig` and is responsible for configuring a Django application named 'database_app'.
Specifies 'BigAutoField' as the default field for automatic primary key creation. 

Class 2: FileExtraction
Derives from `AppConfig` and is focused on loading pre-trained models for text processing. 
Within this class, a tokenizer and a causal language model are loaded from the "meta-llama/Llama-2-7b-chat-hf" path using the Transformers library by Hugging Face. 
The model loads in 8-bit to reduce memory consumption. 
